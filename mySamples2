package com.company;

/**
 * This class is for judging if an input schedule is a valid schedule.
 * Created by hongyangjiang on 10/28/15.
 */
import java.util.*;
public class Scheduling {
    private ArrayList<List<Advertisement>> list1;
    private HashMap<Integer, Integer> advertisementValueMap;
    private HashMap<Integer, Double> areaValueMap;
    private HashMap<Integer, List<Advertisement>> map;
    public boolean Scheduling(ArrayList<Advertisement> input, HashMap<Integer, Integer> advVM, HashMap<Integer, Double> areaVM) {
        advertisementValueMap = advVM;
        areaValueMap = areaVM;
        Comparator<Advertisement> comp1 = new Comparator<Advertisement>() {
            @Override
            public int compare(Advertisement a1, Advertisement a2) {
                if (a1.start == a2.start) {
                    return a1.end - a2.end;
                } else {
                    return a1.start - a2.start;
                }
            }
        };
        input.sort(comp1);
        map = new HashMap<Integer, List<Advertisement>>();
        for (int i = 0; i < input.size(); i++) {
            if (!map.containsKey(input.get(i).areaID)) {
                ArrayList<Advertisement> tempList = new ArrayList<Advertisement>();
                tempList.add(input.get(i));
                map.put(input.get(i).areaID, tempList);
            } else {
                map.get(input.get(i).areaID).add(input.get(i));
            }
        }
        Comparator<Advertisement> comp2 = new Comparator<Advertisement>() {
            @Override
            public int compare(Advertisement o1, Advertisement o2) {
                return o1.end - o2.end;
            }
        };
        for (int i = 0; i < map.size(); i++) {
            List<Advertisement> curList = map.get(i);
            int count = 0;
            PriorityQueue<Advertisement> pq = new PriorityQueue<>(comp2);
            HashSet<Integer> set = new HashSet<Integer>();
            for (int j = 0; j < curList.size(); j++) {
                pq.add(curList.get(j));
                set.add(curList.get(j).ID);
                while (!pq.isEmpty() && pq.peek().end <= curList.get(j).start) {
                    set.remove(pq.peek().ID);
                    pq.poll();
                }
                if (set.contains(curList.get(j).ID)) {
                    curList.remove(j);
                }
                if (pq.size() > 3) {

                }
            }
        }
        return true;
    }
}
